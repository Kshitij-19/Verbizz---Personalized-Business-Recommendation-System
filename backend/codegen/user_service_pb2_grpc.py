# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import user_service_pb2 as user__service__pb2


class UserServiceStub(object):
    """Service for user profile management
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/user.UserService/RegisterUser',
                request_serializer=user__service__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=user__service__pb2.RegisterUserResponse.FromString,
                )
        self.LoginUser = channel.unary_unary(
                '/user.UserService/LoginUser',
                request_serializer=user__service__pb2.LoginUserRequest.SerializeToString,
                response_deserializer=user__service__pb2.LoginUserResponse.FromString,
                )
        self.GetUserProfile = channel.unary_unary(
                '/user.UserService/GetUserProfile',
                request_serializer=user__service__pb2.GetUserProfileRequest.SerializeToString,
                response_deserializer=user__service__pb2.GetUserProfileResponse.FromString,
                )
        self.UpdateUserProfile = channel.unary_unary(
                '/user.UserService/UpdateUserProfile',
                request_serializer=user__service__pb2.UpdateUserProfileRequest.SerializeToString,
                response_deserializer=user__service__pb2.UpdateUserProfileResponse.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/user.UserService/DeleteUser',
                request_serializer=user__service__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=user__service__pb2.DeleteUserResponse.FromString,
                )


class UserServiceServicer(object):
    """Service for user profile management
    """

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=user__service__pb2.RegisterUserRequest.FromString,
                    response_serializer=user__service__pb2.RegisterUserResponse.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=user__service__pb2.LoginUserRequest.FromString,
                    response_serializer=user__service__pb2.LoginUserResponse.SerializeToString,
            ),
            'GetUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserProfile,
                    request_deserializer=user__service__pb2.GetUserProfileRequest.FromString,
                    response_serializer=user__service__pb2.GetUserProfileResponse.SerializeToString,
            ),
            'UpdateUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserProfile,
                    request_deserializer=user__service__pb2.UpdateUserProfileRequest.FromString,
                    response_serializer=user__service__pb2.UpdateUserProfileResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=user__service__pb2.DeleteUserRequest.FromString,
                    response_serializer=user__service__pb2.DeleteUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Service for user profile management
    """

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserService/RegisterUser',
            user__service__pb2.RegisterUserRequest.SerializeToString,
            user__service__pb2.RegisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserService/LoginUser',
            user__service__pb2.LoginUserRequest.SerializeToString,
            user__service__pb2.LoginUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserService/GetUserProfile',
            user__service__pb2.GetUserProfileRequest.SerializeToString,
            user__service__pb2.GetUserProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserService/UpdateUserProfile',
            user__service__pb2.UpdateUserProfileRequest.SerializeToString,
            user__service__pb2.UpdateUserProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserService/DeleteUser',
            user__service__pb2.DeleteUserRequest.SerializeToString,
            user__service__pb2.DeleteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
